<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://scriptedtea.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://scriptedtea.com/" rel="alternate" type="text/html" /><updated>2020-05-10T16:57:49-07:00</updated><id>https://scriptedtea.com/feed.xml</id><title type="html">Scripted Tea</title><subtitle>Coding tips one brew at a time</subtitle><author><name>Lily</name></author><entry><title type="html">How to Use iPhone as a Webcam for Mac for Free</title><link href="https://scriptedtea.com/tech/how-to-use-iphone-as-webcam-free/" rel="alternate" type="text/html" title="How to Use iPhone as a Webcam for Mac for Free" /><published>2020-05-10T00:00:00-07:00</published><updated>2020-05-10T00:00:00-07:00</updated><id>https://scriptedtea.com/tech/how-to-use-iphone-as-webcam-free</id><content type="html" xml:base="https://scriptedtea.com/tech/how-to-use-iphone-as-webcam-free/">&lt;div class=&quot;archive__item-teaser&quot;&gt;
    &lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-10/iphonewebcam.jpg&quot; alt=&quot;&quot; /&gt;
    &lt;span class=&quot;archive__item-caption&quot;&gt;Photo from iPhoneByte
&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Now that working from home is the norm, use of video conferencing became more prevalent than ever. At work we use it to hold meetings, manager chats and even happy hours. Even though casual wear is the standard in tech for everyday work, I’m always conscious about how I present myself to others and in this case, how I look on video. While the built-in webcam on my Macbook is great and all, due to how my screens and computers are laid out on my desk, it’s not at the most ideal position for video calls. I considered buying a dedicated webcam, but due to COVID-19 inventory has been scarce and prices have skyrocketed. I then remembered that I had an old iPhone lying around so I decided to convert that into a webcam. Here I will go through an easy and free way to set it up for your Mac.&lt;/p&gt;

&lt;h6 id=&quot;note-that-this-is-based-on-a-tutorial-i-saw-by-andrew-odri-with-some-modifications-and-added-visuals&quot;&gt;Note that this is based on a tutorial I saw &lt;a href=&quot;https://github.com/andrewodri/iphone-to-macos-camera&quot;&gt;by Andrew Odri&lt;/a&gt; with some modifications and added visuals.&lt;/h6&gt;

&lt;h2 id=&quot;camtwist-studio-free&quot;&gt;CamTwist Studio (Free)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-10/camtwist.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CamTwist Studio is a free app that allows your Mac to detect your iPhone as a source input. It provides a virtual camera input that you can use on various 3rd party video conferencing apps like Zoom, Google Meet, etc. Note that I have only tested this on Google Meet, but the same idea applies for others.&lt;/p&gt;

&lt;p&gt;For this tutorial, I’m running on macOS 10.13 and an iPhone 6S.&lt;/p&gt;

&lt;h3 id=&quot;step-1&quot;&gt;Step 1:&lt;/h3&gt;
&lt;p&gt;On your Mac, &lt;a href=&quot;http://camtwiststudio.com/download/&quot;&gt;install CamTwist Studio&lt;/a&gt;. Note that you may have to override your macOS security setting in order to install it, especially if you’re on macOS 10.15 Catalina. See section “How to open an app that hasn’t been notarized or is from an unidentified developer” on &lt;a href=&quot;https://support.apple.com/en-ca/HT202491&quot;&gt;Apple’s support page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;step-2&quot;&gt;Step 2:&lt;/h3&gt;
&lt;p&gt;By default CamTwist Studio is not configured for high-definition, so we want to change that. Open CamTwist Studio, click on CamTwist -&amp;gt; Preferences menu. In the window that appears, under Video Size select &lt;strong&gt;Custom&lt;/strong&gt;, then enter 1920 and 1080 in the respective boxes as shown below. 
&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-10/ct1.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;
Restart CamTwist Studio in order for the settings to take effect.&lt;/p&gt;
&lt;h3 id=&quot;step-3&quot;&gt;Step 3:&lt;/h3&gt;
&lt;p&gt;On your iPhone, download a minimalistic camera app. A minimalistic camera app would have few to zero camera controls on the UI, as CamTwist is feeding what is shown on the iPhone screen directly. A decent app is &lt;a href=&quot;https://apps.apple.com/us/app/true-visage/id378867398&quot;&gt;True Visage&lt;/a&gt;, which you can download for free. 
Ensure you have disabled notification so it doesn’t display any pop ups while you have the app open, and disable auto-locking to keep the feed running.&lt;/p&gt;

&lt;h3 id=&quot;step-4&quot;&gt;Step 4:&lt;/h3&gt;
&lt;p&gt;Connect your iPhone to your Mac using a USB cable. In the main CamTwist window, select &lt;strong&gt;Webcam&lt;/strong&gt; in the video sources list, click on the &lt;strong&gt;Select&lt;/strong&gt; button, then in the newly-shown Camera list, select &lt;strong&gt;iPhone&lt;/strong&gt;. Click on Save Setup so it gets properly applied.
&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-10/ct2.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-5&quot;&gt;Step 5:&lt;/h3&gt;
&lt;p&gt;Go to your video conferencing app. Make sure you restart the app in order to detect the new virtual camera that was installed as part of CamTwist Studio. For example, I’m using Google Meet so I need to restart Chrome. In the call settings, go to &lt;strong&gt;Video&lt;/strong&gt;, select &lt;strong&gt;CamTwist&lt;/strong&gt; in the Camera selection. You do not need to set the Send/Receive resolution setting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-10/ct3.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you should be able to see the feed coming in from your iPhone camera. Note that you must always have CamTwist running at all times, if at any point the app terminates, a test pattern and a logo appears instead, and you need to restart the vc app / CamTwist to get it working again.&lt;/p&gt;

&lt;p&gt;I hope that this helped make use of your old iPhones that are otherwise collecting dust and save some money from buying an overpriced webcam. Let me know what worked / didn’t work for you by leaving a comment below!&lt;/p&gt;</content><author><name>Lily Guo</name></author><category term="how-to" /><category term="mac" /><category term="iphone" /><summary type="html">Now that working from home is the norm, use of video conferencing became more prevalent than ever. At work we use it to hold meetings, manager chats and even happy hours. Even though casual wear is the standard in tech for everyday work, I'm always conscious about how I present myself to others and in this case, how I look on video.</summary></entry><entry><title type="html">How to Stream Computer Audio and Microphone on Mac Using Blackhole</title><link href="https://scriptedtea.com/tech/how-to-stream-audio-using-blackhole/" rel="alternate" type="text/html" title="How to Stream Computer Audio and Microphone on Mac Using Blackhole" /><published>2020-05-03T00:00:00-07:00</published><updated>2020-05-03T00:00:00-07:00</updated><id>https://scriptedtea.com/tech/how-to-stream-audio-using-blackhole</id><content type="html" xml:base="https://scriptedtea.com/tech/how-to-stream-audio-using-blackhole/">&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/zoom_hangouts-800-0d6564.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/jackbox.png&quot; alt=&quot;image-right&quot; class=&quot;align-right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the COVID-19 lockdown started, one of the things I do to stay connected with friends is by playing games virtually. One of the most popular ones, which I also own, is &lt;a href=&quot;https://www.jackboxgames.com/&quot;&gt;Jackbox Games&lt;/a&gt;. We would all join a video conference call (eg. Google Meet or Zoom) together, I would share my screen with the game on it and everyone else joins using their phone. This works for the most part, except for one part: the audio. Since the game audio (or more generally, my computer audio) is being played through my speakers and getting recorded by my mic, there can potentially be a lot of noise or distortion, which isn’t ideal. After some googling, I learned that streaming computer audio on a Mac is a bit more tricky than Windows, but I managed to find a solution. Here is a tutorial on how to stream both the computer audio and your voice for any major video conferencing app (eg. Zoom, Google Meet, Discord, Skype etc).&lt;/p&gt;

&lt;h2 id=&quot;blackhole&quot;&gt;BlackHole&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/blackhole.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I recommend using &lt;a href=&quot;https://github.com/ExistentialAudio/BlackHole&quot;&gt;BlackHole&lt;/a&gt; as it is a free application that supports the latest macOS (Catalina). This was developed as a replacement to SoundFlower, and similar to its predecessor, it is a virtual driver that you configure to route audio between apps.&lt;/p&gt;

&lt;h3 id=&quot;step-1&quot;&gt;Step 1:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ExistentialAudio/BlackHole&quot;&gt;Download the installer&lt;/a&gt;. Follow the instructions &lt;a href=&quot;https://github.com/ExistentialAudio/BlackHole/wiki/Installation&quot;&gt;here&lt;/a&gt; for how to install BlackHole.&lt;/p&gt;
&lt;h3 id=&quot;step-2&quot;&gt;Step 2:&lt;/h3&gt;
&lt;p&gt;Use Launchpad or Spotlight to open the Audio MIDI Setup app. The app should look like this:
&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/bh1.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-3&quot;&gt;Step 3:&lt;/h3&gt;
&lt;p&gt;Open the app and you should see a list of audio devices, including the newly-installed BlackHole 16ch. The device list may look different depending on what macOS you have and your setup. If you are on macOS 10.14 or older, then you will see &lt;strong&gt;Built-in Microphone&lt;/strong&gt; and &lt;strong&gt;Built-in Output&lt;/strong&gt; where as for 10.15 (Catalina), it will show &lt;strong&gt;MacBook Pro Microphone&lt;/strong&gt; and &lt;strong&gt;Macbook Pro Speakers&lt;/strong&gt; like the screenshot below. Note that I have plugged in my own set of headphones which is why they’re also displayed here separately as “External Headphones” and “External Microphone”. 
&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/bh2.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;
At the bottom left side of the window, there is a &lt;strong&gt;+&lt;/strong&gt; icon. Click on that and you will see a drop-down menu. Select “Create Multi-Output Device”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/bh3.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-4&quot;&gt;Step 4:&lt;/h3&gt;
&lt;p&gt;You should see a list of devices that you can enable for the Multi-Output Device. A Multi-Output Device outputs the audio to all of the enabled devices. For example, if you enable your headphone and the Macbook Pro speaker, then if you play something, for example a video, the audio will come out from both the headphone and the speakers.&lt;/p&gt;

&lt;p&gt;Configure the setting similar to the screenshot below. Due to issues with the macOS, the Built-in Output or MacBook Pro Speaker must be listed as the top device in the Multi-Output. If you have an external headphone connected and do not wish to play the audio through the Built-in Output/Macbook Pro Speaker, then you can mute it by clicking on that device and checking “Mute” in the box on the right.&lt;/p&gt;
&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/bh4.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Make sure drift correction is enabled. If another device is listed at the top, simply uncheck and recheck to change the order.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/bh5.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;You can mute the Macbook Pro Speaker or Built-in Output by clicking on the device and checking the box on the right under the &quot;Mute&quot; column.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;step-5&quot;&gt;Step 5:&lt;/h3&gt;
&lt;p&gt;Right-Click on the newly-created Multi-Output Device, and select “Use This Device For Sound Output”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/bh6.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can also configure it in the Sound Setting under System Preferences by clicking on it:
&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/bh7.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-6&quot;&gt;Step 6:&lt;/h3&gt;
&lt;p&gt;Open the app you use for video call. I used Discord for this example, as it is great for streaming videos. In the Audio setting, make sure you select &lt;strong&gt;BlackHole 16ch&lt;/strong&gt; as the Input Device and &lt;strong&gt;Multi-Output Device&lt;/strong&gt; as the Output Device. Now play a video (eg. on Youtube) and the person on the other side of the call should be able to hear it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/bh8.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;but-it-doesnt-detect-my-microphonevoice-what-to-do&quot;&gt;But it Doesn’t Detect My Microphone/Voice! What to do?&lt;/h2&gt;
&lt;p&gt;Since you’ve changed the input on the video conferencing app to BlackHole, it can no longer get the input from your microphone. In order to be able to stream both your microphone audio AND the system audio, we need a workaround. This is where we need the help of another app - a DAW or a Digital Audio Workstation. A DAW is a general term for applications that you use for recording and editing audio. For this example, we will be using &lt;strong&gt;Garageband&lt;/strong&gt; as it is a free app that comes with the macOS, but the same concept is applied for other DAW as well.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Open Garageband, select “Empty Project” on the prompt.&lt;/li&gt;
  &lt;li&gt;Go to Track -&amp;gt; New Track, and select “Audio Track”. You will see something like the screenshot below.&lt;/li&gt;
  &lt;li&gt;In the highlighted “Input” section, select the microphone you are using. For my case, I have selected “External Microphone”.&lt;/li&gt;
  &lt;li&gt;Enable Monitoring for that track as highlighted in the screenshot below. The button showing as orange means that monitoring is &lt;strong&gt;enabled&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Go to GarageBand -&amp;gt; Preferences. Select Audio/MIDI and then configure the setting like the screenshot below. Input Device is the microphone, whereas the Output Device is &lt;strong&gt;BlackHole 16ch&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Note that to adjust your microphone level, simply turn up the level inside GarageBand, not the level in the Audio MIDI setup. It’s helpful to do a sound check with someone using the video conferencing app to make sure they can hear your voice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/bh9.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;
&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/2020-05-03/bh10.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;
Voila! Now people on the other side of the call should be able to hear both your computer audio and your voice, so you can stream all the Jackbox Games you want without needing to worry about sound quality. If you have headphones plugged in you also don’t need to worry about disturbing your neighbours. I hope this can help improve your entertainment experience and stay connected with family and friends during this troubling time.&lt;/p&gt;</content><author><name>Lily Guo</name></author><category term="how-to" /><category term="mac" /><category term="audio" /><summary type="html">Since the COVID-19 lockdown started, one of the things I do to stay connected with friends is by playing games virtually. One of the most popular ones, which I also own, is Jackbox Games. We would all join a video conference call (eg. Google Meet or Zoom) together, I would share my screen with the game on it and everyone else joins using their phone. This works for the most part, except for one part: the audio. Since the game audio (or more generally, my computer audio) is being played through my speakers and getting recorded by my mic, there can potentially be a lot of noise or distortion, which isn’t ideal. After some googling, I learned that streaming computer audio on a Mac is a bit more tricky than Windows, but I managed to find a solution. Here is a tutorial on how to stream both the computer audio and your voice for any major video conferencing app (eg. Zoom, Google Meet, Discord, Skype etc). BlackHole I recommend using BlackHole as it is a free application that supports the latest macOS (Catalina). This was developed as a replacement to SoundFlower, and similar to its predecessor, it is a virtual driver that you configure to route audio between apps. Step 1: Download the installer. Follow the instructions here for how to install BlackHole. Step 2: Use Launchpad or Spotlight to open the Audio MIDI Setup app. The app should look like this: Step 3: Open the app and you should see a list of audio devices, including the newly-installed BlackHole 16ch. The device list may look different depending on what macOS you have and your setup. If you are on macOS 10.14 or older, then you will see Built-in Microphone and Built-in Output where as for 10.15 (Catalina), it will show MacBook Pro Microphone and Macbook Pro Speakers like the screenshot below. Note that I have plugged in my own set of headphones which is why they’re also displayed here separately as “External Headphones” and “External Microphone”. At the bottom left side of the window, there is a + icon. Click on that and you will see a drop-down menu. Select “Create Multi-Output Device”. Step 4: You should see a list of devices that you can enable for the Multi-Output Device. A Multi-Output Device outputs the audio to all of the enabled devices. For example, if you enable your headphone and the Macbook Pro speaker, then if you play something, for example a video, the audio will come out from both the headphone and the speakers. Configure the setting similar to the screenshot below. Due to issues with the macOS, the Built-in Output or MacBook Pro Speaker must be listed as the top device in the Multi-Output. If you have an external headphone connected and do not wish to play the audio through the Built-in Output/Macbook Pro Speaker, then you can mute it by clicking on that device and checking “Mute” in the box on the right. Make sure drift correction is enabled. If another device is listed at the top, simply uncheck and recheck to change the order. You can mute the Macbook Pro Speaker or Built-in Output by clicking on the device and checking the box on the right under the &quot;Mute&quot; column. Step 5: Right-Click on the newly-created Multi-Output Device, and select “Use This Device For Sound Output” Alternatively, you can also configure it in the Sound Setting under System Preferences by clicking on it: Step 6: Open the app you use for video call. I used Discord for this example, as it is great for streaming videos. In the Audio setting, make sure you select BlackHole 16ch as the Input Device and Multi-Output Device as the Output Device. Now play a video (eg. on Youtube) and the person on the other side of the call should be able to hear it. But it Doesn’t Detect My Microphone/Voice! What to do? Since you’ve changed the input on the video conferencing app to BlackHole, it can no longer get the input from your microphone. In order to be able to stream both your microphone audio AND the system audio, we need a workaround. This is where we need the help of another app - a DAW or a Digital Audio Workstation. A DAW is a general term for applications that you use for recording and editing audio. For this example, we will be using Garageband as it is a free app that comes with the macOS, but the same concept is applied for other DAW as well. Open Garageband, select “Empty Project” on the prompt. Go to Track -&amp;gt; New Track, and select “Audio Track”. You will see something like the screenshot below. In the highlighted “Input” section, select the microphone you are using. For my case, I have selected “External Microphone”. Enable Monitoring for that track as highlighted in the screenshot below. The button showing as orange means that monitoring is enabled. Go to GarageBand -&amp;gt; Preferences. Select Audio/MIDI and then configure the setting like the screenshot below. Input Device is the microphone, whereas the Output Device is BlackHole 16ch. Note that to adjust your microphone level, simply turn up the level inside GarageBand, not the level in the Audio MIDI setup. It’s helpful to do a sound check with someone using the video conferencing app to make sure they can hear your voice. Voila! Now people on the other side of the call should be able to hear both your computer audio and your voice, so you can stream all the Jackbox Games you want without needing to worry about sound quality. If you have headphones plugged in you also don’t need to worry about disturbing your neighbours. I hope this can help improve your entertainment experience and stay connected with family and friends during this troubling time.</summary></entry><entry><title type="html">Flutter and the Mobile World</title><link href="https://scriptedtea.com/tech/flutter-intro/" rel="alternate" type="text/html" title="Flutter and the Mobile World" /><published>2019-10-26T00:00:00-07:00</published><updated>2019-10-26T00:00:00-07:00</updated><id>https://scriptedtea.com/tech/flutter-intro</id><content type="html" xml:base="https://scriptedtea.com/tech/flutter-intro/">&lt;div class=&quot;archive__item-teaser&quot;&gt;
    &lt;img src=&quot;https://scriptedtea.com/assets/images/posts/flutter_logo.png&quot; alt=&quot;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I’ve always been wanting to try doing mobile, but never got a chance to work on it until now. One of the reasons why I bought a Macbook back in 2013 was just so I could do iOS development, but I somehow never got around to do that. Other than not having time or being lazy, there were other things such as deciding whether to make an Android or iOS app. Each had its pros and cons. At the time, I was leaning more towards iOS development as I didn’t own an Android phone then, but having to learn a brand new language (Objective-C) and the entire Apple ecosystem created an uphill battle for me, which made it difficult to get started.&lt;/p&gt;

&lt;p&gt;With Flutter, I don’t need to be locked onto a specific platform. Flutter is &lt;a href=&quot;https://flutter.dev/&quot;&gt;Google’s new cross-platform mobile framework&lt;/a&gt;. It lets you write a single codebase, written in a language called Dart, and Flutter will help you build both native Android and iOS versions for you. During development you can choose to use either Android or iOS devices, which makes it easy for collaboration (eg. Non-Mac users can also contribute to an iOS app, provided at least one person has a Mac to build and release the app). Flutter also provides a set of UI libraries that automatically conforms to the respective platform’s layout, so there’s no need to know about the respective platform’s native library and how they work. In addition, as it is backed by Google, the documentations are very detailed and easy to follow, as I was able to run a demo app within half an hour from reading the setup guide.&lt;/p&gt;

&lt;p&gt;After months of learning and developing, I am proud to share that me and a friend have built our first app and released it in August on Android and iOS, which had a total of over 2,500 downloads! I will talk more about the app in a future post. They say that the best way to learn is through hands-on experience, and through the making of the app, I can say that the experience has been very positive. The only downside is that as Flutter is still relatively new (Version 1.0 was only launched near end of 2018), there are still some lack of support on integrating with basic mobile capabilities (for example, there’s still lack of support for accessing and playing music from your iOS library). The good news is that lately Flutter has been gaining a lot of traction from the dev community, so I’m optimistic that things will improve fairly quickly. It’s safe to say that the app is certainly not my last, and I hope to do a deeper dive into the world of Flutter for my next app.&lt;/p&gt;</content><author><name>Lily Guo</name></author><category term="flutter" /><category term="android" /><category term="ios" /><category term="dart" /><category term="mobile" /><summary type="html">I’ve always been wanting to try doing mobile, but never got a chance to work on it until now. One of the reasons why I bought a Macbook back in 2013 was just so I could do iOS development, but I somehow never got around to do that. Other than not having time or being lazy, there were other things such as deciding whether to make an Android or iOS app. Each had its pros and cons. At the time, I was leaning more towards iOS development as I didn’t own an Android phone then, but having to learn a brand new language (Objective-C) and the entire Apple ecosystem created an uphill battle for me, which made it difficult to get started. With Flutter, I don’t need to be locked onto a specific platform. Flutter is Google’s new cross-platform mobile framework. It lets you write a single codebase, written in a language called Dart, and Flutter will help you build both native Android and iOS versions for you. During development you can choose to use either Android or iOS devices, which makes it easy for collaboration (eg. Non-Mac users can also contribute to an iOS app, provided at least one person has a Mac to build and release the app). Flutter also provides a set of UI libraries that automatically conforms to the respective platform’s layout, so there’s no need to know about the respective platform’s native library and how they work. In addition, as it is backed by Google, the documentations are very detailed and easy to follow, as I was able to run a demo app within half an hour from reading the setup guide. After months of learning and developing, I am proud to share that me and a friend have built our first app and released it in August on Android and iOS, which had a total of over 2,500 downloads! I will talk more about the app in a future post. They say that the best way to learn is through hands-on experience, and through the making of the app, I can say that the experience has been very positive. The only downside is that as Flutter is still relatively new (Version 1.0 was only launched near end of 2018), there are still some lack of support on integrating with basic mobile capabilities (for example, there’s still lack of support for accessing and playing music from your iOS library). The good news is that lately Flutter has been gaining a lot of traction from the dev community, so I’m optimistic that things will improve fairly quickly. It’s safe to say that the app is certainly not my last, and I hope to do a deeper dive into the world of Flutter for my next app.</summary></entry><entry><title type="html">How to Build a Static Jekyll Site with Github Pages</title><link href="https://scriptedtea.com/tech/deployment/" rel="alternate" type="text/html" title="How to Build a Static Jekyll Site with Github Pages" /><published>2019-06-02T00:00:00-07:00</published><updated>2019-06-02T00:00:00-07:00</updated><id>https://scriptedtea.com/tech/deployment</id><content type="html" xml:base="https://scriptedtea.com/tech/deployment/">&lt;div class=&quot;archive__item-teaser&quot;&gt;
    &lt;img src=&quot;https://scriptedtea.com/assets/images/posts/jekyll_pages.jpg&quot; alt=&quot;&quot; /&gt;
    &lt;span class=&quot;archive__item-caption&quot;&gt;Image Credit to Lars Veelaert
&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;One of the great things about Jekyll is that it has close integration with Github Pages, which means you can let Github host and publish your website with just a few config changes. There are a lot of guides (for example, the &lt;a href=&quot;https://help.github.com/en/articles/setting-up-your-github-pages-site-locally-with-jekyll&quot;&gt;official Github documentation&lt;/a&gt;) that talk about how to set it up, so I won’t go over it here. Within a few minutes, I was able to get my site up and running, and I was amazed at how easy it was to do that, but later on I ran into some issues that caused me to change my entire setup completely.&lt;/p&gt;

&lt;p&gt;The way that is works is that you push all your code into the master branch, and then you create (or let Github create) another branch called &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;. Github will automatically render the page based on the source that resides on that branch. Therefore my workflow before consisted of the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make changes on &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch, commit/push to remote&lt;/li&gt;
  &lt;li&gt;Switch to &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch, merge changes from master to branch, commit/push to remote &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
  &lt;li&gt;Github will automatically render what’s on &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The biggest problem with this is that Github Pages does not support custom Jekyll plugins. I was troubleshooting with another issue where the solution required using a custom component, and that’s when I realized that the current set up is a deal breaker for me. I decided to find out a different way of deploying my website while still using Github Pages. After some googling, I found that it’s possible to deploy only the static pages (all the content in &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder), which contain the files post rendering by Jekyll. This required doing some Git trickery, and after consulting with various solutions, this is what has worked for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make gh-pages only contain the generated HTML files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is what the new setup would look like.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch would only contain the source files (&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder is ignored)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch would only contain what’s in &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder, and has no knowledge of files outside of it (and from its view, the content of &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder is the root)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But by default in Git, you cannot have two branches that point to a different root. I’ve considered doing something with Git submodules but the downside to that is that master branch would end up keeping track of all the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder, which means I end up duplicating the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; content, which is not ideal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution is to put another git repo inside the _site folder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The current git repo would continue pointing to the master branch as before (with &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder ignored), and then the 2nd git repo would be created inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder so it would have no knowledge of what’s outside of that folder. The 2nd repo would be pointing to the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch so it would not conflict with the master branch.&lt;/p&gt;

&lt;p&gt;Here are the git commands to help you get set up:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// First push all source files to origin master
$ git init
$ git add .
$ git remote add origin ssh://git@github.com:username/project.git
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now gitignore the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;_site&quot; &amp;gt; .gitignore
$ git add .
$ git commit -m &quot;adding gitignore&quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now clone the 2nd repo, delete the master branch in the new repo:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd _site
// Make sure this directory is empty via
$ rm -r
$ git clone ssh://git@github.com:username/project.git .
$ git checkout origin/gh-pages -b gh-pages
// Delete the master branch
$ git branch -d master
// Now locally delete all the files
$ rm -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Build the Jekyll site locally to generate the HTMl files, then push&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ..
$ bundle exec jekyll build
$ cd _site
$ git add .
$ git commit -m &quot;Deploying build&quot;
$ git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the project root repo, make sure there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch, and you’re all set!&lt;/p&gt;

&lt;p&gt;Make sure that you put an empty file called &lt;code class=&quot;highlighter-rouge&quot;&gt;.nojekyll&lt;/code&gt; file in the project root folder, so then Jekyll will put that file in &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder, and Github Pages will not try to render what’s in &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder as a Jekyll site. It will just display a static site instead.&lt;/p&gt;

&lt;p&gt;Now this is the new workflow using the new set up. Follow the steps below once you are finished making changes in your source and you want to deploy the new site to Github Pages.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll build&lt;/code&gt; in project root folder&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;cd _site&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;Commit Message Here&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a simple bash script called &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; that will do all the above commands (except for the build command) for you:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Please enter a git commit message&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
git push origin gh-pages &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Successfully built and pushed gh-pages to Github.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure you give permission for the script to run:
&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x deploy.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To run, just type this:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ./deploy.sh &quot;Your Commit Message Here&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that’s it! I got the best of both worlds where I get to keep track the source and the generated files on separate branches (thus avoided having to keep track of duplicate files), and I got to be able to use custom Jekyll plugins!&lt;/p&gt;</content><author><name>Lily Guo</name></author><category term="jekyll" /><category term="github pages" /><category term="web development" /><summary type="html">One of the great things about Jekyll is that it has close integration with Github Pages, which means you can let Github host and publish your website with just a few config changes. There are a lot of guides (for example, the [official Github documentation](https://help.github.com/en/articles/setting-up-your-github-pages-site-locally-with-jekyll)) that talk about how to set it up, so I won't go over it here.</summary></entry><entry><title type="html">Why I Chose Jekyll to Build My Website</title><link href="https://scriptedtea.com/tech/why-jekyll/" rel="alternate" type="text/html" title="Why I Chose Jekyll to Build My Website" /><published>2019-03-15T00:00:00-07:00</published><updated>2019-03-15T00:00:00-07:00</updated><id>https://scriptedtea.com/tech/why-jekyll</id><content type="html" xml:base="https://scriptedtea.com/tech/why-jekyll/">&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/jekyll_logo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been wanting to create my own website for a long time, but never really committed to making one until recently. Since I had no former experience with web development, I had to start from the very beginning - from researching which stack to use all the way to web hosting and deployment. I wanted to make sure that I chose the right tools that suit my needs, and after a bit of research I ended up going with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Here is why.&lt;/p&gt;

&lt;p&gt;My criteria for a website was simple: it should be 1) relatively quick to build and 2) gives me full customization capability. I’ve used various CMS in the past such as weebly/blogspot/wix, but I’ve found that those aren’t as flexible in customization as compared to building my own website. I also had to decide whether it would be a static website or a dynamic one as each would have very different tech stacks. Because my site would mainly be used for blogging and occasionally photo sharing, a static website would be more suitable as it is more light-weight than a dynamic one. It’s also worth to note that I did not need something that is only available in a dynamic website, such as a database or a login page. Then it came down to choosing a static site generator, since writing everything in raw HTML isn’t the most exciting thing, and managing all the asset files would be a pain. Initially, I heard about Jekyll through a friend of mine when he showed me his website that he was working on at the time. I decided to install it and play around with it, and found the setup extremely simple and well-documented. Another factor was that Jekyll is fully supported by Github Pages, which provides free web hosting provided that the repository is public, so overall it was an easy sell for me. (Although using Github Pages came with its own challenges, more on that in a later post) Jekyll offered a suite of themes that you could use to get started, and so after a bit of browsing I decided to use &lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;Minimal Mistakes&lt;/a&gt;, which had pretty much everything I needed with a bit of customization. I highly recommend it if you are looking for a template to get started.&lt;/p&gt;

&lt;p&gt;After using Jekyll to build my static website, I have to say that I’m glad I went with it because it provides the best of both worlds in that it allows me to fully design my website in HTML/CSS/JS but on the other hand enables me to write minimal amount of code when I write a blog post (blog post has full markdown support and lets me inject raw HTML code if I find the need to do that). Not needing to code meant that I can focus more on the content of my posts, but also gives me the flexibility to make the post more visually appealing if I find the need to.&lt;/p&gt;

&lt;p&gt;I will be posting more about Jekyll, so stay tuned!&lt;/p&gt;</content><author><name>Lily</name></author><category term="jekyll" /><category term="github pages" /><category term="web development" /><summary type="html">I've been wanting to create my own website for a long time, but never really committed to making one until recently. Since I had no former experience with web development, I had to start from the very beginning - from researching which stack to use all the way to web hosting and deployment. I wanted to make sure that I chose the right tools that suit my needs, and after a bit of research I ended up going with [Jekyll](https://jekyllrb.com/). Here is why.</summary></entry><entry><title type="html">Happy New Year!</title><link href="https://scriptedtea.com/miscellaneous/happy-new-year/" rel="alternate" type="text/html" title="Happy New Year!" /><published>2019-01-13T00:00:00-08:00</published><updated>2019-01-13T00:00:00-08:00</updated><id>https://scriptedtea.com/miscellaneous/happy-new-year</id><content type="html" xml:base="https://scriptedtea.com/miscellaneous/happy-new-year/">&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/image6-600by602-414ee3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Happy New Year! I was on a plane when the clock striked past midnight while coming back on my trip from China. My 2 week vacation went by in a blur, and the next thing I knew I was already back to work. Unfortunately I caught a flu nearing the tail end of my trip so I took a day off to recover. I found that drinking some Chinese medicine really helped with re-gaining my appetite, and after 2 weeks I was finally able to eat normally.&lt;/p&gt;

&lt;p&gt;As with most people, I plan on setting some goals for myself this year, but unlike a typical New Years Resolution - goals that you need to stick with for an entire year - it’s much more feasible to set quarterly goals, then review your progress at the end of every quarter. As you already can see, I am currently working on my personal blog/site. What I love about working on this is that not only do I get to code but I also get to make various design choices and be able to create my own content. On the other hand that also came with its own set of challenges, mostly because it’s my first time going full deep-dive into web development using HTML/CSS/Jekyll/Liquid. I am hoping to finish by the end of the first quarter, but we will see how that goes. I will be writing posts while building the site so there are some content when I launch the site. Can’t wait to see the finished product!&lt;/p&gt;

&lt;p&gt;Hoping to have updates to the site very soon!&lt;/p&gt;</content><author><name>Lily</name></author><category term="diary" /><summary type="html">Happy New Year! I was on a plane when the clock striked past midnight while coming back on my trip from China. My 2-week vacation went by in a blur, and the next thing I knew I was already back to work. Unfortunately I caught a stomach flu nearing the tail end of my trip so I took a day off to recover. I found that drinking some Chinese medicine really helped with re-gaining my appetite, and after 2 weeks of treatment I was finally able to eat normally.</summary></entry></feed>